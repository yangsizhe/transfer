import numpy as np

def rotation_matrix_to_euler_angles(R):
    """
    Convert rotation matrix to Euler angles.
    """
    sy = np.sqrt(R[0, 0] * R[0, 0] + R[1, 0] * R[1, 0])
    singular = sy < 1e-6
    if not singular:
        x = np.arctan2(R[2, 1], R[2, 2])
        y = np.arctan2(-R[2, 0], sy)
        z = np.arctan2(R[1, 0], R[0, 0])
    else:
        x = np.arctan2(-R[1, 2], R[1, 1])
        y = np.arctan2(-R[2, 0], sy)
        z = 0
    return np.array([x, y, z])

def angle_between_rotations(R1, R2):
    """
    Calculate the angle between two rotation matrices.
    """
    # Compute the rotation matrix representing the rotation from R1 to R2
    R = np.dot(R1.T, R2)
    # Extract the Euler angles from the rotation matrix
    angles = rotation_matrix_to_euler_angles(R)
    # Compute the angle magnitude
    angle_magnitude = np.linalg.norm(angles)
    return angle_magnitude

# Example rotation matrices
R1 = np.array([[1, 0, 0],
               [0, 0, -1],
               [0, 1, 0]])

R2 = np.array([[0, 0, 1],
               [0, 1, 0],
               [-1, 0, 0]])

# Calculate the angle between the two rotation matrices
angle = angle_between_rotations(R1, R2)
print("Angle between the two rotation matrices:", np.degrees(angle))
